<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bee.myApp.blog.dao.mapper.ArticleCommentMapper">
  <resultMap id="BaseResultMap" type="com.bee.myApp.blog.dao.entity.ArticleComment">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="commentEmail" jdbcType="VARCHAR" property="commentEmail" />
    <result column="commentName" jdbcType="VARCHAR" property="commentName" />
    <result column="articleId" jdbcType="BIGINT" property="articleId" />
    <result column="originalCommentId" jdbcType="BIGINT" property="originalCommentId" />
    <result column="originalCommentName" jdbcType="VARCHAR" property="originalCommentName" />
    <result column="createTime" jdbcType="TIMESTAMP" property="createTime" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="commentContent" jdbcType="LONGVARCHAR" property="commentContent" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from blog_article_comment
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.bee.myApp.blog.dao.entity.ArticleComment">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into blog_article_comment (commentEmail, commentName, articleId, 
      originalCommentId, originalCommentName, 
      createTime, `status`, commentContent
      )
    values (#{commentEmail,jdbcType=VARCHAR}, #{commentName,jdbcType=VARCHAR}, #{articleId,jdbcType=BIGINT}, 
      #{originalCommentId,jdbcType=BIGINT}, #{originalCommentName,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{status,jdbcType=INTEGER}, #{commentContent,jdbcType=LONGVARCHAR}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.bee.myApp.blog.dao.entity.ArticleComment">
    update blog_article_comment
    set commentEmail = #{commentEmail,jdbcType=VARCHAR},
      commentName = #{commentName,jdbcType=VARCHAR},
      articleId = #{articleId,jdbcType=BIGINT},
      originalCommentId = #{originalCommentId,jdbcType=BIGINT},
      originalCommentName = #{originalCommentName,jdbcType=VARCHAR},
      createTime = #{createTime,jdbcType=TIMESTAMP},
      `status` = #{status,jdbcType=INTEGER},
      commentContent = #{commentContent,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select id, commentEmail, commentName, articleId, originalCommentId, originalCommentName, 
    createTime, `status`, commentContent
    from blog_article_comment
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, commentEmail, commentName, articleId, originalCommentId, originalCommentName, 
    createTime, `status`, commentContent
    from blog_article_comment
  </select>
</mapper>